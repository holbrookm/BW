#!/usr/bin/python

""" This script will access the ocip via http commands with SOAP XML content.
    #Marc Holbrook
    # 0851742253
    # <mholbrook@eircom.ie>

    Modified 15-9-16: Added Get DNS Function

"""


import requests, debug
import logging_config
from requests.auth import HTTPDigestAuth




#_host = '10.147.21.198'  # Live Node
_host = '10.144.134.198'   # Test Plant
_port = '2208'
_ociuser = 'admin'
_ocipass = 'admin'
_timeout = 30


logger = logging_config.logger

def __readinxml__(f):
    ''' Internal method to read in XML file for use within package functions.
    '''
    logger.debug('Method : ocip_functions.__readinxml__')

    XML = open(f,'r')
    _xml = XML.read()
    logger.debug('**Leaving FUNC :::: ocip_functions.__readinxml__')
    XML.close()
    return (_xml)


def ocip_head(_session_id):
    """
    """
    head_xml = __readinxml__('/root/Dropbox/PYTHON/Marc/ACTIVE/BWWORK/xml/head.xml.tmpl').format(_session_id)
    #head_xml = XML.read().format(_session_id)
    return head_xml

def ocip_bottom():
    """
    """
    return __readinxml__('/root/Dropbox/PYTHON/Marc/ACTIVE/BWWORK/xml/bottom.xml.tmpl')
    
def ocip_authentication(user):
    '''
    '''
    xml = __readinxml__('/root/Dropbox/PYTHON/Marc/ACTIVE/BWWORK/xml/auth.xml.tmpl').format(user)
    return xml

def ocip_login(user, signedPW):
    '''
    '''
    xml = __readinxml__('/root/Dropbox/PYTHON/Marc/ACTIVE/BWWORK/xml/login.xml.tmpl').format(user, signedPW)
    return xml

def ocip_logout(session_id):
    ''' This function will logout of the ocip platform using the session id supplied.'''
    logger.debug(" FUNC: ocip_logut   : ")
    head = ocip_head(session_id)
    _xml = __readinxml__('/root/Dropbox/PYTHON/Marc/ACTIVE/BWWORK/xml/logout.xml.tmpl').format(_ociuser)
    tail = ocip_bottom()
    logout_xml = head + _xml + tail
    logger.debug(logout_xml)
    return logout_xml
    

    headers ={'content-type':'text/xml; charset=utf-8',  'SOAPAction':'CAI3G#Logout'}
    r= requests.post('http://'+_host +':'+ _port, data = insert_xml, headers = headers, auth =('admin', 'admin'))
    if r.status_code != 200:
        logger.error (' ERROR: An error has occurred trying to logout of the ocip platform.')
        logger.error (r.status_code)
        logger.error (r.text)
    else:
        logger.debug (' Logout successfull!!!!')
        logger.debug (r.text)
    logger.debug('**Leaving FUNC :::: ocip_functions.ocip_logout')
    return


def ocipLogin(username = _ociuser, password =_ocipass, session =''):
    ''' This function will login into the ocip platform using the user name and password supplied.
        >>> from requests.auth import HTTPDigestAuth
        >>> url = 'http://httpbin.org/digest-auth/auth/user/pass'
        >>> requests.get(url, auth=HTTPDigestAuth('user', 'pass'))
    '''
    logger.debug(" FUNC: ocip_function.ocipLogin(Username, Password)       : ")
    head = ocip_head(session)
    auth = ocip_authentication(username)
    tail = ocip_bottom()

    insert_xml = head + auth + tail
    return_code = None
    #logger.debug(insert_xml)
    headers ={'content-type':'text/xml; charset=utf-8', 'Accept-Encoding': 'ISO-8859-1',}
    """headers = {
            'Content-Type': 'text/xml; charset=utf-8',
            'Accept': 'application/soap+xml, application/dime, multipart/related, text/*',
            'User-Agent': 'Axis/1.3',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'SOAPAction': '',
            'Connection': '',
            'Accept-Encoding': 'ISO-8859-1',
        }
    """
    print (headers)    
    r= requests.get('http://'+_host +':'+ _port, data = insert_xml, headers = headers, auth = HTTPDigestAuth('admin', 'admin'), stream = False, verify = True, timeout =_timeout)
    if r.status_code != 200:
        logger.error (' ERROR: An error has occurred trying to login into the ocip platform.')
        logger.error (r.status_code)
        logger.error (r.text)
    else:
        '''tree= ET.fromstring(r.text)
        for node in tree.getiterator():
            if node.tag == '{http://schocips.ericsson.com/cai3g1.2/}baseSequenceId': sequence_id = node.text
            if node.tag == '{http://schocips.ericsson.com/cai3g1.2/}sessionId' : session_id = node.text
        if sequence_id !='' and session_id !='':
            logger.debug  (('Sequence Id 1 :   {0}    ::::: Session Id 1 :   {1}').format (sequence_id, session_id))
            session = { "sequence_id" : sequence_id, "session_id": session_id, "transaction_id" : "12334455", "ocip_host": ocip_host, "ocip_port": ocip_port}
            return_code = (session)
        '''
        print (r.text)
        print (r.status_code)    
    logger.debug('**Leaving FUNC :::: ocip_functions.ocipLogin')
    return (return_code) # Return login information for future requests



if __name__ == "__main__":
    main()




